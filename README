NAME
    DBICx::MaterializedPath - DBIx::Class plugin for automatically tracking
    lineage paths in simple data trees (Beta software).

VERSION
    0.01_01

SYNOPSIS
DESCRIPTION
  CAVEAT
    This package requires your table has

METHODS
    ancestors
    get_root
    grandchildren
    node_depth
    root_node
    set_materialized_path
    siblings

  OVERRIDDEN METHODS
    insert
        Sets the materialized path.

    update
        Updates which change the parent of a record necessarily cascade
        through all their children and grandchildren to recompute and set
        their new materialized paths. E.g., given this treeE<ndash>

                          1
                          |
                          3
                         / \
                       12   8
                      /\    /\
                     5 13  7  4

        You get paths including 1/3/12/13 and 1/3/4. Let's say we change
        record 3's parent from 1 to 2E<ndash>

                          2
                          |
                          3
                         / \
                       12   8
                      /\    /\
                     5 13  7  4

        The change is simple and it's obvious you have to update record 3
        but you just broke the materialized path for recrods 4, 5, 7, 8, 12,
        and 13. In a big tree you may have broken hundreds or even thousands
        of paths with a single parent change. So we have to process all
        descendants. Our example paths become 2/3/12/13 and 2/3/4. Again, it
        may seem trivial but it may be expensive depending on the tree's
        depth and breadth. This simplistic example will require three
        database readsE<mdash>children of 3, children of 12, children of
        8E<mdash>and six updatesE<mdash>each of 4, 5, 7, 8, 12, and 13. This
        doesn't even count the original expense of finding and updating 3
        itself. But the point here is that we should have a write seldom,
        read often situation and this up front expense may save
        exponentially with regards to ongoing query costs.

CAVEATS
    If your materialized path column is insufficiently large you're going to
    have problems. A "VARCHAR(255)" is only wide enough to support a tree
    which is 35 nodes deep if the average PK values are integers in the
    millions. This might be fine for your usage. Just be aware path tracking
    is not arbitrary, it's limited to the column's width.

TO DO
    Better documents; obviously.
    More tests; what else is new?
        One set with nothing changed: use default column names.

        One set with everything changed.

CODE REPOSITORY
    <http://github.com/pangyre/p5-dbicx-materializedpath>.

SEE ALSO
    *Trees in SQL: Nested Sets and Materialized Path*, Vadim Tropashko,
    <http://www.dbazine.com/oracle/or-articles/tropashko4>.

    DBIx::Class::Ordered, DBIx::Class.

  WHY NOT DBIx::Class::Ordered?
    There are data sets which have implicit, or even tacit,
    orderingE<mdash>E<rdquo>positionE<ldquo> in DBIx::Class::Ordered
    parlanceE<ndash> in the data already. Published articles, for example,
    will be naturally ordered chronologically. Additional position tracking
    becomes complex and redundant in this kind of case. You can even run
    into cases where both types of ordering are necessary like a collection
    of dictionaries. Each dictionary's terms are ordered alphabetically
    while each term's definitions would be ordered by a position set at
    editorial discretion.

AUTHOR
    Ashley Pond V · ashley.pond.v@gmail.com · <http://pangyresoft.com>.

LICENSE
    You may redistribute and modify this software under the same terms as
    Perl itself.

DISCLAIMER OF WARRANTY
    Because this software is licensed free of charge, there is no warranty
    for the software, to the extent permitted by applicable law. Except when
    otherwise stated in writing the copyright holders and other parties
    provide the software "as is" without warranty of any kind, either
    expressed or implied, including, but not limited to, the implied
    warranties of merchantability and fitness for a particular purpose. The
    entire risk as to the quality and performance of the software is with
    you. Should the software prove defective, you assume the cost of all
    necessary servicing, repair, or correction.

    In no event unless required by applicable law or agreed to in writing
    will any copyright holder, or any other party who may modify or
    redistribute the software as permitted by the above license, be liable
    to you for damages, including any general, special, incidental, or
    consequential damages arising out of the use or inability to use the
    software (including but not limited to loss of data or data being
    rendered inaccurate or losses sustained by you or third parties or a
    failure of the software to operate with any other software), even if
    such holder or other party has been advised of the possibility of such
    damages.

